generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int                @id @default(autoincrement())
  email        String             @unique
  password     String
  name         String
  role         Role               @default(USER)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  loginCount   Int                @default(0)
  bio          String?
  education    String?
  experience   String?
  location     String?
  phone        String?
  profilePic   String?
  resumeUrl    String?
  skills       String?
  applications Application[]
  audits       ApplicationAudit[] @relation("AuditChangedBy")
  jobs         Job[]              @relation("PostedJobs")
  jobViews     JobView[]
}

model Job {
  id           Int           @id @default(autoincrement())
  title        String
  description  String
  company      String
  location     String
  postedById   Int
  createdAt    DateTime      @default(now())
  salaryMax    Int?
  salaryMin    Int?
  role         String?
  workMode     WorkMode      @default(REMOTE)
  views        Int           @default(0)
  incentive    String?
  workTime     String?
  applications Application[]
  postedBy     User          @relation("PostedJobs", fields: [postedById], references: [id])
  jobViews     JobView[]
}

model Application {
  id        Int                @id @default(autoincrement())
  userId    Int
  jobId     Int
  resumeUrl String
  createdAt DateTime           @default(now())
  status    Status             @default(PENDING)
  job       Job                @relation(fields: [jobId], references: [id])
  user      User               @relation(fields: [userId], references: [id])
  audits    ApplicationAudit[]
}

model ApplicationAudit {
  id             Int         @id @default(autoincrement())
  applicationId  Int
  previousStatus Status
  newStatus      Status
  changedById    Int
  note           String?
  createdAt      DateTime    @default(now())
  application    Application @relation(fields: [applicationId], references: [id])
  changedBy      User        @relation("AuditChangedBy", fields: [changedById], references: [id])

  @@index([applicationId])
  @@index([changedById])
}

model JobView {
  id        Int      @id @default(autoincrement())
  jobId     Int
  userId    Int?
  ip        String?
  createdAt DateTime @default(now())
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  RECRUITER
  ADMIN
}

enum Status {
  PENDING
  SHORTLISTED
  REJECTED
  REVIEWED
  ACCEPTED
}

enum WorkMode {
  OFFICE
  HOME
  REMOTE
  HYBRID
}
